## Use case
We want to know the DSDT and SSDT tables from our users so we can create an
application that automatically detects the right ACPI calls. Machine
information from `dmidecode` must be attached too so we know from which
manufacturer and model the tables are from. To know which video card is used,
information about PCI devices should be attached too

## Current practices
These tables are available from the dump from the `acpidump` tool. Then,
`acpixtract` extracts the SSDT and DSDT tables from the previous dump which can
be converted to human-readable ASL using `iasl`. PCI device information is not
attached at all.
Until now, the user would have to:

1. install `acpidump` and `iasl`
2. Run `acpidump`, `acpixtract` and `iasl` to generate the human-readable ASL
   files (*.dsl)
3. Run `dmidecode` several times for the manufacturer and model info
4. Create a tarball of the generated files (*.dsl and dmidecode.txt)
5. Send the result to an emailaddress or mailing list

## Comments
Currently, the submission of the dsl files are scattered and the information
often incomplete (missing machine information). Known places to find the ASL
files are the mailing list of Launchpad Hybrid Graphics, the ACPI wiki page of
Bumblebee-Project/Bumblebee and mailboxes of several developers. This makes it
hard to get to the actual task: analysing the files.
Furthermore, the current commands may be too complicated for the user, which
may lead to errors in running the right command.

## Goal
The commands for the user should be as easy as possible and the submission less
difficult, meaning that sending a mail may be too difficult since it involves
opening the mail client, selecting the tarball as attachment and press "Send".
For developers and other interested people, the next features should be
available:

- Search by machine information
- Download each individual DSDT or SSDT table
- Get a listing of submissions for each manufacturer, subdivided by product
  names
- Search through the headers of the ASL files (OEM ID, OEM Table ID)

## Implementation
The centralized place is a webserver which accepts uploads of dmidecode and
acpidump data and compile the tables itself. This has the advantage that:

- the user does not have to install iasl anymore
- the `acpixtract` and `iasl` may be removed from the client commands
  (simplification)
- should there be any errors in the `iasl` or `acpixtract` tools on the
  client-side, the resulting ASL files may contain errors too. Generating the
  files on the server side ensures that the generated files have a consistent
  formatting.
- the receiver only needs to validate one file (acpidump.txt) instead of
  several *.dsl files

## Workflow
On the user side:

1. The user installs acpidump
2. For the ACPI dump, (s)he runs `sudo acpidump > acpidump.txt`
3. Then (s)he writes the following dmidecode fields to `dmidecode.txt`:

   - baseboard-manufacturer
   - baseboard-product-name
   - baseboard-version
   - system-manufacturer
   - system-product-name
   - system-version
   This can be done with:

        : > dmidecode.txt
        for $keyword in $keywords; do
            printf "%-22s: %s\n" $keyword "$(sudo dmidecode -s $keyword)" \
                >> dmidecode.txt
        done
3. Store the PCI device info: `sudo lspci -vvnn > lspci.txt`
4. The files should then be submitted to the server using wget or curl or using
   a web interface

On the server side:

1. The webserver validates the file size (1M should be reasonable, my three
   tables creates a file of size 212K) and dmidecode information. The checksum
   of the acpidump.txt file is checked to avoid duplicate database entries. In
   addition, the format of dmidecode.txt is checked.
2. If accepted, the file is pushed to a queue folder
3. The result (duplicate, success or error) is displayed

A cron job processes the queue, for each submission:

1. It runs `acpixtract` to get DSDT.dat and SSDT[1-9].dat files (SSDT is
   optional though and we need to set a sensible limit for number of SSDT
   files)
2. The resulting .dat files are disassembled to .dsl (ASL) files using `iasl`
3. The .dsl files are validated
4. If everything is valid, the DSDT and SSDT tables are saved using their
   checksum
5. The result of the commands are saved to a public log file

### Directory structure
/dsdt/SUM
/ssdt/SUM
/baseboard/manufacturer/
