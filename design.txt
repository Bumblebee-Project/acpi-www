## Use case
We want to know the DSDT and SSDT tables from our users so we can create an
application that automatically detects the right ACPI calls for disabling the
nvidia graphics card. Machine information from `dmidecode` must be attached too
so we know from which manufacturer and model the tables are from. To know which
video card is used, information about PCI devices should be attached too

## Current practices
These tables are available from the dump from the `acpidump` tool. Then,
`acpixtract` extracts the SSDT and DSDT tables from the previous dump which can
be converted to human-readable ASL using `iasl`. PCI device information is not
attached at all.
Until now, the user would have to:

1. install `acpidump` and `iasl`
2. Run `acpidump`, `acpixtract` and `iasl` to generate the human-readable ASL
   files (*.dsl)
3. Run `dmidecode` several times for the manufacturer and model info
4. Create a tarball of the generated files (*.dsl and dmidecode.txt)
5. Send the result to an emailaddress or mailing list

## Comments
Currently, the submission of the dsl files are scattered and the information
often incomplete (missing machine information). Known places to find the ASL
files are the mailing list of Launchpad Hybrid Graphics, the ACPI wiki page of
Bumblebee-Project/Bumblebee and mailboxes of several developers. This makes it
hard to get to the actual task: analysing the files.
Furthermore, the current commands may be too complicated for the user, which
may lead to errors in running the right command.

## Goal
The commands for the user should be as easy as possible and the submission less
difficult, meaning that sending a mail may be too difficult since it involves
opening the mail client, selecting the tarball as attachment and press "Send".
For developers and other interested people, the next features should be
available:

- Search by machine information
- Download each individual DSDT or SSDT table
- Get a listing of submissions for each manufacturer, subdivided by product
  names
- Search through the headers of the ASL files (OEM ID, OEM Table ID)

## Implementation
The centralized place is a webserver which accepts uploads of dmidecode and
acpidump data and compile the tables itself. This has the advantage that:

- the user does not have to install iasl anymore
- the `acpixtract` and `iasl` may be removed from the client commands
  (simplification)
- should there be any errors in the `iasl` or `acpixtract` tools on the
  client-side, the resulting ASL files may contain errors too. Generating the
  files on the server side ensures that the generated files have a consistent
  formatting.
- the receiver only needs to validate one file (acpidump.txt) instead of
  several *.dsl files

## Workflow
On the user side:

1. The user installs acpidump
2. For the ACPI dump, (s)he runs `sudo acpidump > acpidump.txt`
3. Then (s)he writes the following dmidecode fields to `dmidecode.txt`:

   - baseboard-manufacturer
   - baseboard-product-name
   - baseboard-version
   - system-manufacturer
   - system-product-name
   - system-version
   This can be done with:

        : > dmidecode.txt
        for keyword in baseboard-manufacturer baseboard-product-name \
            baseboard-version system-manufacturer system-product-name \
            system-version; do
            printf "%-22s: %s\n" $keyword "$(sudo dmidecode -s $keyword)" \
                >> dmidecode.txt
        done
   In other words, each line contains `keyword               : value` (note the
   padding between keyword and the colon)
3. Store the PCI device info: `lspci -n > lspci.txt`
4. The files should then be submitted to the server using wget or curl or using
   a web interface

These steps should be available in a shellscript so the user does not have to
copy the command which may result in an error. Example usage:

    wget example.com/acpi-info -O acpi-info && bash acpi-info
`-O acpi-info` is added explicitly to prevent existing files to be preserved.

On the server side:

1. The webserver validates the file size of `acpidump.txt` (1M should be
   reasonable, my three tables creates a file of size 212K)
2. dmidecode information is validated, each field should be present and the
   value should not exceed X characters (X=32?). Format is "%-22s: %s"
3. The checksum of `acpidump.txt` is checked. If it was not seen before, the
   file is added to the acpixtract queue
4. lspci.txt is queued for processing / processed
5. The result (duplicate, success or error) is displayed

### lspci queue
The contents of lspci.txt is checked which should match:
"BusID DeviceClass: VendorID:DeviceID (rev NN)" where DeviceClass is a VGA
compatible controller or a 3D controller. VendorID is 8086 for Intel
Corporation and 10de for nVidia Corporation.
Example for a GT425M:

    02:00.0 0300: 10de:0df0 (rev a1)
Only the BusID (02:00.0) is important to us, the device ID (0df0) should be
looked up.


### acpixtract queue
1. `acpixtract` is ran to get DSDT.dat and SSDT[1-9].dat files (SSDT is
   optional but we need to set a sensible limit for number of SSDT tables)
2. The resulting .dat files are disassembled to .dsl (ASL) files using `iasl`
3. The .dsl files are validated
4. If everything is valid, the DSDT and SSDT tables are saved using their
   checksum
5. The result of the commands are saved to a public log file

### Directory structure
/dsdt/SUM - dsdt table
/ssdt/SUM - sdsdt table

/submission/NUMBER/index.html -> links to tables, txt's and display notes
/submission/NUMBER/lspci.txt
/submission/NUMBER/dmidecode.txt

Categories (need further thinking):
/board-manufacturer/
/board-product-name/
/board-version/
/sys-manufacturer/
/sys-product-name/
/sys-version/
Consider:
- linking to submissions
- dividing manufacturer into product names
- put this in a search form

### Database
machines
- 1:1 DSDT
- 1:N SSDT
- 1:1 dmidecode.txt
- 1:1 lspci.txt

submissions
- 1:1 machine (see "machines")
- 1:1 dmidecode.txt
- 1:1 metadata: submission date
- 1:1 metadata: user-supplied notes

Data which can be retrieved from files ("caching"):
- dmidecode
  - 6 fields of 32 chars (should contain unique values)
- machine
  - PCI Bus ID (7 chars)
  - Vendor ID (2 bytes, smallint in MySQL)
  - Device ID (2 bytes, smallint in MySQL)
- submissions
  - timestamp (timestamp in MySQL, valid until 2038)
  - notes (max 255 chars)
XXX to be filled

### Preventing abuse
Public services are always prone to abuse. There just needs to be one misbehaving idiot and we've another ton of mess to clean up. So, we must have some way to prevent abuse which include:

- spammers inserting random glibberish
- invalid acpidump.txt, dmidecode.txt or lspci.txt
- spam notes

Possible protections:

- moderated upload, each upload has to be marked as accepted
XXX to be filled